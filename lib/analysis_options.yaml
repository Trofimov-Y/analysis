# ================================================================================================================
# Structured configuration for Dart analyzer and DCM for Flutter projects
# ================================================================================================================

analyzer:
  # ====================================
  # STRICT LANGUAGE SETTINGS
  # ====================================
  language:
    strict-casts: true        # Strict type casting
    strict-inference: true    # Strict type inference  
    strict-raw-types: true    # Strict raw types

  # ====================================
  # ERROR LEVEL SETTINGS
  # ====================================
  errors:
    depend_on_referenced_packages: error                       # Dependencies must be declared
    close_sinks: ignore                                        # Ignore sink closing (often false positives)
    missing_required_param: error                              # Missing required parameters
    missing_return: error                                      # Missing return in functions
    record_literal_one_positional_no_trailing_comma: error     # Comma in records with one element
    collection_methods_unrelated_type: warning                 # Collection methods with unrelated types
    unrelated_type_equality_checks: warning                    # Comparison of unrelated types

  # ====================================
  # ANALYSIS EXCLUSIONS
  # ====================================
  exclude:
    - "**/.test_coverage.dart"              # Test coverage files
    - "**/generated_plugin_registrant.dart" # Generated plugin registration files
    - "**/injector.dart"                    # Dependency injection files
    - "**.freezed.dart"                     # Generated Freezed files
    - "**.g.dart"                           # Generated files
    - "**.gform.dart"                       # Generated forms

# ====================================
# FORMATTING SETTINGS
# ====================================
formatter:
  page_width: 110  # Maximum line width

# ================================================================================================================
# DART LINTER RULES
# ================================================================================================================
linter:
  rules:
    # ====================================
    # CODE STYLE AND NAMING
    # ====================================
    
    # Types and naming
    - camel_case_extensions                    # UpperCamelCase for extensions
    - camel_case_types                         # UpperCamelCase for types
    - constant_identifier_names                # SCREAMING_CAPS for constants
    - file_names                               # snake_case for files
    - non_constant_identifier_names            # lowerCamelCase for variables
    - package_names                            # lowercase_with_underscores for packages
    
    # Structure and order
    - always_declare_return_types              # Explicit return type annotations
    - always_put_required_named_parameters_first # Required named parameters first
    - always_use_package_imports               # Prefer package: imports
    - combinators_ordering                     # Order of show/hide in imports
    - directives_ordering                      # Order of import/export directives
    - library_prefixes                         # lowercase_with_underscores for prefixes
    - sort_constructors_first                  # Constructors at the beginning of class
    - sort_unnamed_constructors_first          # Unnamed constructors first
    - sort_child_properties_last               # child/children properties last

    # Formatting and style
    - curly_braces_in_flow_control_structures  # Curly braces in control structures
    - prefer_single_quotes                     # Single quotes for strings
    - eol_at_end_of_file                       # Newline at end of file
    - leading_newlines_in_multiline_strings    # Newlines in multiline strings
    - missing_whitespace_between_adjacent_strings # Spaces between adjacent strings

    # ====================================
    # TYPE SAFETY AND ERROR DETECTION
    # ====================================
    
    # Type safety
    - avoid_dynamic_calls                     # Avoid calls on dynamic objects
    - cast_nullable_to_non_nullable           # Explicit casting of nullable to non-nullable
    - collection_methods_unrelated_type       # Collection methods with correct types
    - unrelated_type_equality_checks          # Equality checks of related types
    - null_check_on_nullable_type_parameter   # Null-check on nullable type parameters
    - avoid_type_to_string                    # Avoid toString() on types
    - avoid_types_as_parameter_names          # Types should not be parameter names
    
    # Error detection
    - avoid_empty_else                        # Avoid empty else blocks
    - empty_catches                           # Avoid empty catch blocks  
    - empty_statements                        # Avoid empty statements
    - no_duplicate_case_values                # Unique values in case statements
    - no_self_assignments                     # Avoid self-assignment
    - hash_and_equals                         # hashCode when overriding ==
    - test_types_in_equals                    # Type checking in equals
    - literal_only_boolean_expressions        # Only boolean in conditions
    - avoid_equals_and_hash_code_on_mutable_classes # equals/hashCode on mutable classes

    # Control flow
    - control_flow_in_finally                # Avoid break/continue in finally
    - throw_in_finally                       # Avoid throw in finally
    - exhaustive_cases                       # Complete switch for enums

    # ====================================
    # OPTIMIZATION AND PERFORMANCE
    # ====================================
    
    # Const optimizations  
    - prefer_const_constructors               # const constructors where possible
    - prefer_const_constructors_in_immutables # const in immutable classes
    - prefer_const_declarations               # const for immutable variables
    - prefer_const_literals_to_create_immutables # const literals for collections
    - avoid_field_initializers_in_const_classes  # Avoid initializers in const classes
    
    # Collections and iteration
    - prefer_collection_literals             # Collection literals instead of constructors
    - prefer_is_empty                        # isEmpty instead of length == 0
    - prefer_is_not_empty                    # isNotEmpty instead of length != 0  
    - prefer_contains                        # contains() instead of indexOf != -1
    - prefer_iterable_whereType             # whereType for type filtering
    - prefer_for_elements_to_map_fromIterable # for-elements instead of Map.fromIterable
    
    # Final and immutability
    - prefer_final_fields                   # final for immutable fields
    - prefer_final_in_for_each              # final in for-each loops
    - prefer_final_locals                   # final for local variables
    - avoid_final_parameters                # Avoid final parameters (excessive)
    
    # Flutter optimizations
    - sized_box_for_whitespace              # SizedBox for spacing
    - sized_box_shrink_expand               # SizedBox.shrink/expand
    - use_colored_box                       # ColoredBox instead of Container with color
    - use_key_in_widget_constructors        # Key in widget constructors

    # ====================================
    # READABILITY AND CODE SIMPLIFICATION
    # ====================================
    
    # Simplifying conditions and operators
    - avoid_bool_literals_in_conditional_expressions # Avoid true/false in ternary
    - prefer_conditional_assignment         # ??= for conditional assignment
    - prefer_if_null_operators              # ?? operators
    - prefer_null_aware_operators           # ?. operators
    - prefer_null_aware_method_calls        # Null-aware method calls
    - use_if_null_to_convert_nulls_to_bools # ??= for bool values
    
    # Strings and interpolation
    - prefer_adjacent_string_concatenation    # Concatenation of adjacent strings
    - prefer_interpolation_to_compose_strings # Interpolation instead of concatenation
    - avoid_escaping_inner_quotes          # Avoid escaping inner quotes
    - unnecessary_brace_in_string_interps  # Redundant braces in interpolation
    - unnecessary_string_escapes           # Redundant string escaping
    - unnecessary_string_interpolations    # Redundant interpolation
    - use_raw_strings                      # Raw strings for regular expressions
    - unnecessary_raw_strings              # Redundant raw strings

    # Cascade calls and chains
    - cascade_invocations                   # Cascade calls for sequences
    - avoid_single_cascade_in_expression_statements # Avoid single cascades
    
    # Collections and spread
    - prefer_spread_collections            # Spread operators
    - no_adjacent_strings_in_list          # Avoid adjacent strings in lists
    - prefer_inlined_adds                  # Inline additions to collections

    # ====================================
    # FLUTTER SPECIFIC RULES
    # ====================================
    
    # Flutter widgets and performance
    - avoid_unnecessary_containers         # Avoid unnecessary Container
    - no_logic_in_create_state             # No logic in createState
    - use_full_hex_values_for_flutter_colors # Full hex values for colors
    - flutter_style_todos                    # TODO in Flutter style
    - avoid_web_libraries_in_flutter         # Avoid web libraries in Flutter
    
    # Build context
    - use_build_context_synchronously     # Synchronous use of BuildContext

    # ====================================
    # ASYNCHRONOUS PROGRAMMING
    # ====================================
    
    # Future and async/await
    - await_only_futures                  # await only for Future
    - unawaited_futures                   # Handle unawaited Future
    - unnecessary_await_in_return         # Redundant await in return
    - avoid_void_async                    # Avoid void async functions
    - avoid_slow_async_io                 # Avoid slow async IO operations
    - unnecessary_async                   # Redundant async functions
    
    # Subscriptions and resources
    - cancel_subscriptions               # Cancel subscriptions
    - null_closures                      # Null in closures

    # ====================================
    # ARCHITECTURE AND IMPORTS
    # ====================================
    
    # Imports and exports
    - implementation_imports             # Prohibit importing internal files
    - avoid_relative_lib_imports         # Prohibit relative imports from lib/
    - depend_on_referenced_packages      # Dependencies must be declared
    - secure_pubspec_urls                # Secure URLs in pubspec
    
    # Public API
    - library_private_types_in_public_api # Private types not in public API
    - type_annotate_public_apis          # Types in public APIs
    - library_annotations                # Library annotations
    
    # Privacy and underscores
    - no_leading_underscores_for_library_prefixes # No _ in library prefixes
    - no_leading_underscores_for_local_identifiers # No _ in local identifiers

    # ====================================
    # FUNCTIONS AND METHODS
    # ====================================
    
    # Function declarations
    - prefer_function_declarations_over_variables # Function declarations instead of variables
    - prefer_generic_function_type_aliases # Generic function type aliases
    - use_function_type_syntax_for_parameters # Function type syntax for parameters
    - avoid_private_typedef_functions     # Avoid private typedef functions
    
    # Parameters
    - avoid_unused_constructor_parameters # Unused constructor parameters
    - parameter_assignments              # Avoid assigning to parameters
    - avoid_renaming_method_parameters   # Avoid renaming method parameters
    - prefer_initializing_formals       # Initializing formal parameters
    - type_init_formals                 # Types of initializing parameters
    - tighten_type_of_initializing_formals # Tighten types of initializing parameters
    - use_super_parameters              # super parameters
    
    # Return values
    - avoid_return_types_on_setters     # Return types not for setters
    - avoid_returning_null_for_void     # Don't return null for void
    - avoid_returning_this              # Avoid returning this
    - join_return_with_assignment       # Combine return with assignment

    # ====================================
    # ERROR HANDLING AND EXCEPTIONS
    # ====================================
    
    # Try-catch
    - avoid_catching_errors             # Avoid catching Error (only Exception)
    - only_throw_errors                 # Throw only Error/Exception
    - use_rethrow_when_possible         # rethrow instead of throw in catch
    
    # ====================================
    # ADDITIONAL QUALITY RULES
    # ====================================
    
    # Deprecated and deprecated
    - deprecated_consistency            # Deprecated consistency
    - provide_deprecation_message       # Messages for deprecated
    
    # Getters and setters
    - avoid_setters_without_getters    # Setters with getters
    - unnecessary_getters_setters      # Redundant getters/setters
    - use_setters_to_change_properties # Setters for changing properties
    - recursive_getters                # Recursive getters
    - overridden_fields                # Overridden fields
    
    # Redundancy and simplifications
    - avoid_redundant_argument_values  # Redundant default argument values
    - unnecessary_const                # Redundant const
    - unnecessary_new                  # Redundant new
    - unnecessary_this                 # Redundant this
    - unnecessary_parenthesis          # Redundant parentheses
    - unnecessary_lambdas              # Redundant lambdas
    - unnecessary_late                 # Redundant late
    - unnecessary_overrides            # Redundant overrides
    - unnecessary_statements           # Redundant statements
    - unnecessary_breaks               # Redundant break
    - unnecessary_library_directive    # Redundant library directives
    - unnecessary_library_name         # Redundant library names
    - unnecessary_constructor_name     # Redundant constructor names
    - unnecessary_null_aware_assignments # Redundant ??= assignments
    - unnecessary_null_checks          # Redundant null checks
    - unnecessary_null_in_if_null_operators # Redundant null in ?? operators
    - unnecessary_nullable_for_final_variable_declarations # Redundant nullable for final
    - unnecessary_to_list_in_spreads   # Redundant toList in spreads
    
    # Initialization and null safety
    - avoid_init_to_null               # Avoid explicit null initialization
    - prefer_typing_uninitialized_variables # Types for uninitialized variables
    - use_late_for_private_fields_and_variables # late for private fields
    
    # Other rules
    - avoid_multiple_declarations_per_line # One declaration per line
    - avoid_print                      # Avoid print in production
    - empty_constructor_bodies         # Empty constructor bodies as ;
    - prefer_constructors_over_static_methods # Constructors instead of static methods
    - avoid_function_literals_in_foreach_calls # Avoid function literals in forEach
    - prefer_if_elements_to_conditional_expressions # if elements instead of ternary
    - use_named_constants              # Named constants
    - avoid_shadowing_type_parameters  # Avoid shadowing type parameters
    - prefer_asserts_in_initializer_lists # Assert in initializer lists
    - prefer_asserts_with_message      # Assert with messages
    - use_string_buffers               # StringBuffer for concatenation
    - use_string_in_part_of_directives # Strings in part of
    - use_test_throws_matchers         # Matchers for exceptions in tests
    - use_to_and_as_if_applicable      # to and as where applicable
    - valid_regexps                    # Valid regular expressions
    - void_checks                      # Void checks
    - use_enums                        # Use enum
    - use_is_even_rather_than_modulo   # isEven instead of % 2
    - comment_references               # References in comments
    - conditional_uri_does_not_exist   # URI in conditional imports exist
    - dangling_library_doc_comments    # Dangling doc comments
    - document_ignores                 # Document ignore
    - implicit_call_tearoffs           # Implicit tearoffs
    - implicit_reopen                  # Implicit reopen
    - invalid_case_patterns            # Valid case patterns
    - invalid_runtime_check_with_js_interop_types # Runtime checks with JS interop
    - missing_code_block_language_in_doc_comment # Language in code blocks
    - no_default_cases                 # No default in exhaustive switch
    - no_wildcard_variable_uses        # Use of wildcard variables
    - noop_primitive_operations        # Useless primitive operations
    - type_literal_in_constant_pattern # Type literals in constant patterns
    - unintended_html_in_doc_comment   # Unintended HTML in comments
    - avoid_js_rounded_ints            # Avoid rounded ints in JS
    - avoid_double_and_int_checks      # Avoid double and int checks
    - slash_for_doc_comments           # /// for doc comments

    # Commented rules (consider for inclusion)
    #- unsafe_variance                  # Unsafe variance
    #- specify_nonobvious_property_types # Non-obvious property types
    #- avoid_catches_without_on_clauses # Catch with exception type specification  
    #- require_trailing_commas          # Required trailing commas
    - strict_top_level_inference       # Strict top-level type inference
    - unnecessary_underscores          # Redundant underscores

# ================================================================================================================
# DCM (DART CODE METRICS) RULES
# ================================================================================================================
dart_code_metrics:
  # ====================================
  # DCM FORMATTER SETTINGS
  # ====================================
  formatter:
    indent: 0                               # Indent for cascading extensions
    line-length: 110                        # Line length
    cascading-widget-extensions: false      # Cascading widget extensions

  rules:
    # ====================================
    # OPTIMIZATION AND SIMPLIFICATION
    # ====================================
    
    # Local variables and fields
    - avoid-unnecessary-local-variable        # Redundant local variables
    - avoid-unnecessary-late-fields           # Redundant late fields
    - avoid-unnecessary-nullable-parameters   # Redundant nullable parameters
    - avoid-unnecessary-nullable-fields       # Redundant nullable fields
    - avoid-never-passed-parameters           # Never passed parameters
    - avoid-unnecessary-statements            # Redundant statements
    - avoid-unnecessary-length-check          # Redundant length checks
    - avoid-unnecessary-null-aware-elements   # Redundant null-aware elements
    - avoid-unnecessary-block                 # Redundant blocks
    - avoid-unnecessary-compare-to            # Redundant compareTo
    
    # Futures and asynchrony
    - avoid-future-ignore                     # Ignoring Future
    - prefer-specifying-future-value-type     # Specify types for Future
    - avoid-unnecessary-futures               # Redundant Future wrappers
    - prefer-assigning-await-expressions      # Assign await expressions
    - avoid-redundant-async                   # Redundant async
    - prefer-return-await                     # return await where needed
    
    # Patterns and destructuring
    - avoid-single-field-destructuring        # Destructuring single field
    - use-existing-destructuring              # Use existing destructuring
    - avoid-unnecessary-patterns              # Redundant patterns
    
    # Elements and collections
    - prefer-null-aware-elements              # Null-aware elements where needed
    - prefer-add-all                          # addAll instead of loop add
    - prefer-for-in                           # for-in instead of regular for
    - avoid-adjacent-strings                  # Adjacent strings
    
    # ====================================
    # FLUTTER SPECIFIC RULES  
    # ====================================
    
    # Containers and layout
    - prefer-constrained-box-over-container   # ConstrainedBox instead of Container
    - prefer-align-over-container             # Align instead of Container (duplicated)
    - prefer-transform-over-container         # Transform instead of Container (duplicated)
    - prefer-padding-over-container           # Padding instead of Container
    - prefer-center-over-align                # Center instead of Align
    - prefer-sized-box-square                 # SizedBox.square for squares
    - prefer-spacing                          # Use spacing
    - prefer-container                        # Proper use of Container
    
    # Flex and layout
    - avoid-flexible-outside-flex             # Flexible only inside Flex
    - avoid-expanded-as-spacer                # Expanded not as spacer
    - avoid-single-child-column-or-row        # Column/Row with single child
    
    # Widgets and state
    - avoid-empty-setstate                    # Empty setState
    - avoid-incomplete-copy-with              # Incomplete copyWith
    - avoid-recursive-widget-calls            # Recursive widget calls
    - avoid-state-constructors                # Constructors in State
    - avoid-unnecessary-overrides-in-state    # Redundant overrides in State
    - avoid-unnecessary-setstate              # Redundant setState
    - avoid-unnecessary-stateful-widgets      # Redundant StatefulWidget
    - avoid-stateless-widget-initialized-fields # Initialized fields in StatelessWidget
    
    # Resource management
    - avoid-undisposed-instances:             # Undisposed instances
        ignored-instances:                    # Exceptions for specific types
          - FormControl
          - FormGroup  
          - FormArray
    - always-remove-listener                 # Remove listeners
    - dispose-fields                         # Dispose for fields
    
    # Context and safety
    - avoid-late-context                     # Avoid late context
    - avoid-inherited-widget-in-initstate    # InheritedWidget not in initState
    - use-closest-build-context              # Closest BuildContext
    - avoid-missing-controller               # Missing controllers
    - use-setstate-synchronously             # Synchronous use of setState
    
    # Widgets and rendering
    - avoid-returning-widgets                # Return widgets from methods
    - avoid-shrink-wrap-in-lists             # shrinkWrap in lists  
    - avoid-unnecessary-gesture-detector     # Redundant GestureDetector
    - check-for-equals-in-render-object-setters # Equals checks in RenderObject setters
    - proper-super-calls                        # Proper super calls
    
    # Style and appearance
    - avoid-border-all                       # Border.all where inappropriate
    - avoid-incorrect-image-opacity          # Proper opacity for images
    - prefer-action-button-tooltip           # Tooltip for action buttons
    - prefer-const-border-radius             # const for BorderRadius
    - prefer-define-hero-tag                 # Define hero tag
    - prefer-sliver-prefix                   # Sliver prefix for appropriate widgets
    - prefer-text-rich                       # Text.rich for rich text
    - prefer-using-list-view                 # ListView where appropriate
    
    # Media Query optimizations
    - prefer-dedicated-media-query-methods  # Specific MediaQuery methods
    
    # Widget privacy
    - prefer-widget-private-members:        # Private widget members
        ignore-static: true                 # Ignore static members
    
    # Commented Flutter rules
    #- avoid-missing-image-alt              # Alt text for images
    #- prefer-single-widget-per-file:       # One widget per file
    #    ignore-private-widgets: true

    # ====================================
    # ARCHITECTURAL CONSTRAINTS
    # ====================================
    
    # File and function sizes
    - avoid-long-files:                      # File size limitation
        max-length: 400                      # Maximum 400 lines
    - avoid-long-functions:                  # Function size limitation
        max-length: 100                      # Maximum 100 lines
        ignored-names:                       # Exceptions for specific functions
          - build                            # Flutter build methods
          - builder                          # Builder functions
    - avoid-long-parameter-list:             # Parameter count limitation
        ignore-optional: true                # Ignore optional
        max-number: 6                        # Maximum 6 parameters
        ignored-names:                       # Exceptions
          - copyWith                         # copyWith methods often have many parameters
    - avoid-long-records:                    # Record size limitation
        max-number: 4                        # Maximum 4 fields
    
    # Class member order
    - member-ordering:                       # Class member order
        order:                               # General order
          - constructors
          - named-constructor
          - public-fields
          - private-fields
          - public-getters
          - private-getters
          - public-setters
          - private-setters
          - close-method
          - dispose-method
          - public-methods
          - private-methods
        widgets-order:                       # Special order for widgets
          - constructor
          - named-constructor
          - const-fields
          - final-fields
          - init-state-method
          - did-change-dependencies-method
          - did-update-widget-method
          - dispose-method
          - private-methods
          - overriden-public-methods
          - build-method
    
    # Name matching
    - prefer-match-file-name:               # Match class name to file name
        exclude:                            # Exceptions
          - "test/**"                       # Test files
          - "lib/**/*wm.dart"               # Widget Model files

    # ====================================
    # SECURITY AND RELIABILITY
    # ====================================
    
    # Access and encapsulation
    - avoid-accessing-other-classes-private-members # Access to private members
    - avoid-accessing-collections-by-constant-index # Access by constant index
    
    # Global state and references
    - avoid-global-state                    # Global state
    - avoid-suspicious-global-reference     # Suspicious global references
    - avoid-suspicious-super-overrides      # Suspicious super overrides
    
    # Null safety and assertions
    - avoid-non-null-assertion              # ! operator
    - avoid-unassigned-late-fields          # Unassigned late fields
    - avoid-unassigned-stream-subscriptions # Unassigned Stream subscriptions
    
    # Recursion and calls
    - avoid-recursive-calls                # Recursive calls
    - avoid-missed-calls                   # Missed calls
    - handle-throwing-invocations          # Handle throwing invocations
    
    # Async and Future safety
    - avoid-uncaught-future-errors         # Unhandled Future errors
    - avoid-missing-completer-stack-trace  # Missing stack trace in Completer
    
    # Cryptography
    - avoid-weak-cryptographic-algorithms # Weak cryptographic algorithms
    
    # Error handling
    - avoid-throw-in-catch-block           # throw in catch blocks
    - avoid-throw-objects-without-tostring # Objects without toString in throw
    - avoid-only-rethrow                   # Only rethrow in catch

    # ====================================
    # STYLE AND CODE READABILITY
    # ====================================
    
    # Conditions and logic
    - avoid-nested-conditional-expressions:  # Nested ternary operators
        acceptable-level: 2                  # Maximum 2 levels
    - avoid-negated-conditions               # Negated conditions
    - avoid-conditions-with-boolean-literals # Boolean literals in conditions
    - avoid-contradictory-expressions        # Contradictory expressions
    - avoid-equal-expressions                # Equal expressions
    - prefer-early-return:                   # Early return
        ignore-if-case: true                 # Ignore if-case
    - prefer-simpler-boolean-expressions     # Simplify boolean expressions
    - prefer-simpler-patterns-null-check     # Simplify null-check patterns
    
    # Variables and assignments
    - move-variable-closer-to-its-usage   # Variables closer to usage
    - move-variable-outside-iteration     # Variables outside loops
    - avoid-multi-assignment              # Multiple assignments
    - avoid-self-assignment               # Self-assignment
    - avoid-self-compare                  # Self-comparison
    - avoid-unused-after-null-check       # Unused after null-check
    - avoid-referencing-discarded-variables # References to discarded variables
    - use-existing-variable               # Use existing variables
    - avoid-mutating-parameters           # Mutating parameters
    - avoid-passing-self-as-argument      # Pass self as argument
    
    # Formatting and layout
    - newline-before-method               # Empty line before method
    - newline-before-case                 # Empty line before case
    - newline-before-return               # Empty line before return
    - arguments-ordering:                 # Argument order
        last:                             # Last should be:
          - child                         # child
          - children                      # children
    
    # Identifiers and naming
    - prefer-correct-identifier-length:   # Identifier length
        max-identifier-length: 30         # Maximum 30 characters
        min-identifier-length: 2          # Minimum 2 characters
    - prefer-correct-error-name:          # Correct names for errors
        allowed-names: [ error, exception, failure ]
    - prefer-correct-setter-parameter-name # Correct setter parameter names
    - prefer-correct-type-name            # Correct type names
    - match-getter-setter-field-names     # Match getter/setter names to fields
    - match-positional-field-names-on-assignment # Match positional names on assignment
    
    # Numbers and formats
    - prefer-digit-separators             # Digit separators in numbers
    - avoid-unnecessary-digit-separators  # Redundant digit separators
    - avoid-inconsistent-digit-separators # Inconsistent separators
    - double-literal-format:              # Double literal format
        explicit-trailing-zero: false     # Don't require explicit trailing zero
    
    # Comments
    - format-comment:                     # Comment formatting
        only-doc-comments: false          # Not only doc comments
    - prefer-commenting-pubspec-ignores   # Comment pubspec ignores

    # ====================================
    # ADDITIONAL DART RULES
    # ====================================
    
    # Arithmetic and operations  
    - avoid-complex-arithmetic-expressions # Complex arithmetic expressions
    - binary-expression-operand-order     # Binary expression operand order
    - avoid-bitwise-operators-with-booleans # Bitwise operators with boolean
    - prefer-compound-assignment-operators # Compound assignment operators
    
    # Collections and iteration
    - avoid-collection-equality-checks    # Collection equality
    - avoid-collection-methods-with-unrelated-types # Collection methods with unrelated types
    - avoid-misused-set-literals         # Misused Set literals
    - avoid-map-keys-contains            # contains for Map keys
    - avoid-slow-collection-methods      # Slow collection methods
    - avoid-unsafe-reduce               # Unsafe reduce operations
    - prefer-any-or-every               # any/every where appropriate
    - prefer-first                      # first instead of [0]
    - prefer-last                       # last instead of [length-1]
    - prefer-iterable-of                # Iterable.of where appropriate
    
    # Types and casting
    - avoid-explicit-type-declaration   # Explicit type declarations where not needed
    - avoid-unrelated-type-assertions   # Unsafe type assertions
    - avoid-unrelated-type-casts        # Unsafe type casts
    - avoid-unnecessary-type-assertions # Redundant type checks
    - avoid-unnecessary-type-casts      # Redundant type casts
    - prefer-explicit-type-arguments    # Explicit type arguments
    - prefer-type-over-var              # Types instead of var
    
    # Functions and methods
    - function-always-returns-same-value # Functions always returning same value
    - function-always-returns-null      # Functions always returning null
    - prefer-explicit-function-type     # Explicit function types
    - prefer-explicit-parameter-names   # Explicit parameter names
    - prefer-immediate-return           # Immediate return
    - avoid-unused-parameters           # Unused parameters
    - avoid-unused-generics             # Unused generics
    - avoid-unused-instances            # Unused instances
    
    # Strings and URI
    - avoid-incorrect-uri               # Correct URI
    - avoid-nullable-interpolation      # Nullable interpolation
    - avoid-nullable-tostring           # Nullable toString
    
    # Enum and switch
    - avoid-enum-values-by-index        # Access enum by index
    - avoid-wildcard-cases-with-enums   # Wildcard case with enum
    - avoid-wildcard-cases-with-sealed-classes # Wildcard case with sealed classes
    - prefer-enums-by-name              # Enum by names
    - prefer-switch-with-enums          # switch with enum
    - prefer-specific-cases-first       # Specific cases first
    
    # Patterns (new Dart features)
    - avoid-bottom-type-in-patterns     # Bottom types in patterns
    - avoid-bottom-type-in-records      # Bottom types in records
    - avoid-keywords-in-wildcard-pattern # Keywords in wildcard patterns
    - avoid-misused-wildcard-pattern    # Misused wildcard patterns
    - avoid-mixing-named-and-positional-fields # Mixing named and positional fields
    - avoid-one-field-records           # Records with single field
    - avoid-positional-record-field-access # Positional access to record fields
    - prefer-wildcard-pattern           # Wildcard patterns where appropriate
    - move-records-to-typedefs:         # Move records to typedef
        min-fields: 3                   # Minimum 3 fields
    
    # Records and extension types (new features)
    - avoid-nested-records              # Nested records
    - avoid-nested-extension-types      # Nested extension types
    - avoid-extensions-on-records       # Extensions on records
    - avoid-function-type-in-records    # Function types in records
    - avoid-casting-to-extension-type   # Casting to extension types
    - prefer-private-extension-type-field # Private extension type fields
    - avoid-renaming-representation-getters # Renaming representation getters
    
    # Futures and Streams
    - avoid-nested-futures              # Nested Future
    - avoid-nested-streams-and-futures  # Nested Stream and Future
    - avoid-future-tostring             # toString on Future
    - pass-existing-future-to-future-builder # Existing Future in FutureBuilder
    - pass-existing-stream-to-stream-builder # Existing Stream in StreamBuilder
    - prefer-compute-over-isolate-run   # compute instead of Isolate.run
    
    # Switch expressions (new feature)
    - avoid-nested-switch-expressions   # Nested switch expressions
    - avoid-nested-switches             # Nested switch
    - no-equal-switch-case              # Equal cases in switch
    - no-equal-switch-expression-cases  # Equal cases in switch expressions
    - prefer-correct-switch-length      # Correct switch length
    
    # Constructors and inheritance
    - prefer-redirecting-superclass-constructor # Redirecting superclass constructors
    - prefer-declaring-const-constructor: # Declare const constructors
        ignore-abstract: true             # Ignore abstract classes
    - prefer-abstract-final-static-class  # Abstract final static classes
    - prefer-overriding-parent-equality   # Override parent equality
    
    # Blocks and operators
    - no-empty-block                   # Empty blocks
    - avoid-collapsible-if             # Collapsible if
    - avoid-unnecessary-if             # Redundant if
    - avoid-unnecessary-conditionals   # Redundant conditions
    - avoid-unnecessary-return         # Redundant return
    - avoid-unnecessary-super          # Redundant super
    - avoid-unnecessary-negations      # Redundant negations
    - avoid-unnecessary-reassignment   # Redundant reassignments
    - avoid-unnecessary-nullable-return-type # Redundant nullable return types
    - avoid-unnecessary-local-late     # Redundant local late
    - avoid-unconditional-break        # Unconditional break
    - no-equal-conditions              # Equal conditions
    - no-equal-nested-conditions       # Equal nested conditions
    - no-equal-then-else               # Equal then-else branches
    
    # Special cases
    - avoid-cascade-after-if-null      # Cascade after if-null
    - prefer-parentheses-with-if-null  # Parentheses with if-null
    - prefer-null-aware-spread         # Null-aware spread
    - avoid-duplicate-cascades         # Duplicate cascades
    - avoid-duplicate-collection-elements # Duplicate collection elements
    - avoid-duplicate-exports          # Duplicate exports
    - avoid-duplicate-initializers     # Duplicate initializers
    - avoid-duplicate-map-keys         # Duplicate Map keys
    - avoid-duplicate-named-imports    # Duplicate named imports
    - avoid-duplicate-patterns         # Duplicate patterns
    - avoid-duplicate-switch-case-conditions # Duplicate case conditions
    - avoid-empty-spread               # Empty spread operators
    - avoid-explicit-pattern-field-name # Explicit field names in patterns
    - avoid-redundant-else             # Redundant else
    - avoid-redundant-positional-field-name # Redundant positional field names
    - avoid-redundant-pragma-inline    # Redundant pragma inline
    
    # Other quality rules
    - avoid-dynamic                     # Avoid dynamic
    - avoid-generics-shadowing          # Generic shadowing
    - avoid-identical-exception-handling-blocks # Identical exception handling blocks
    - avoid-importing-entrypoint-exports # Import entrypoint exports
    - avoid-inverted-boolean-checks     # Inverted boolean checks
    - avoid-local-functions             # Local functions
    - avoid-missing-enum-constant-in-map # Missing enum constants in Map
    - avoid-missing-interpolation       # Missing interpolation
    - avoid-negations-in-equality-checks # Negations in equality checks
    - avoid-not-encodable-in-to-json   # Not encodable in toJson
    - avoid-nullable-parameters-with-default-values # Nullable parameters with default values
    - avoid-passing-default-values     # Pass default values
    - avoid-redundant-pragma-inline    # Redundant pragma inline
    - avoid-shadowed-extension-methods # Shadowed extension methods
    - avoid-shadowing:                 # Variable shadowing
        ignored-names:                 # Exceptions for commonly used names
          - context                    # BuildContext is often called context
          - state                      # State is often called state
    - avoid-top-level-members-in-tests # Top-level members in tests
    - avoid-unknown-pragma             # Unknown pragma
    - dispose-class-fields             # Dispose class fields
    - prefer-bytes-builder             # BytesBuilder for bytes
    - prefer-conditional-expressions   # Conditional expressions
    - prefer-correct-for-loop-increment # Correct for loop increments
    - prefer-correct-json-casts        # Correct JSON casts
    - prefer-correct-stream-return-type # Correct Stream return types
    - prefer-moving-to-variable:       # Move to variable
        allowed-duplicated-chains: 3   # Allowed duplicated chains
    - prefer-named-boolean-parameters: # Named boolean parameters
        ignore-single: true            # Ignore single
        ignore-single-boolean: false   # Don't ignore single boolean
    - prefer-public-exception-classes  # Public exception classes
    - no-boolean-literal-compare       # Compare with boolean literals
    
    # Callbacks and types
    - prefer-void-callback             # VoidCallback instead of Function
    - prefer-async-callback            # AsyncCallback for async functions
    
    # Loop optimizations
    - avoid-unreachable-for-loop       # Unreachable for loops
    - avoid-complex-loop-conditions    # Complex loop conditions
    
    # Additional checks
    - avoid-late-final-reassignment    # Reassign late final
    - avoid-deprecated-usage           # Use deprecated
    - avoid-recursive-tostring         # Recursive toString
    - avoid-constant-assert-conditions # Constant assert conditions
    - avoid-nested-assignments         # Nested assignments
    - avoid-nested-try-statements      # Nested try statements
    - avoid-excessive-expressions      # Excessive expressions
    - avoid-async-call-in-sync-function # Async calls in sync functions
    - avoid-double-slash-imports       # Double slashes in imports
    - avoid-empty-test-groups          # Empty test groups
    - prefer-single-setstate           # Single setState instead of multiple
    - avoid-mounted-in-setstate        # mounted in setState
    - pass-correct-accepted-type       # Correct accepted types
    
    # Commented rules (consider for inclusion)
    #- prefer-commenting-future-delayed # Comments for Future.delayed
    #- avoid-if-with-many-branches      # if with many branches
    #- prefer-class-destructuring       # Class destructuring
    #- avoid-continue                   # Avoid continue
    #- prefer-switch-expression         # Switch expressions
    #- prefer-single-declaration-per-file # Single declaration per file
    - avoid-barrel-files               # Barrel files (re-export files)
    #- avoid-non-ascii-symbols          # Non-ASCII symbols
    #- avoid-passing-async-when-sync-expected # Async when sync expected
    #- avoid-returning-void             # Return void
    #- no-object-declaration            # Object declaration
    #- prefer-addition-subtraction-assignments # += and -= assignments
    #- prefer-correct-callback-field-name # Correct callback field names
    #- prefer-correct-future-return-type # Correct Future return types
    #- format-test-name                 # Format test names
    #- enum-constants-ordering          # Enum constants order
    #- avoid-unsafe-collection-methods  # Unsafe collection methods
    #- prefer-named-imports             # Named imports
    #- prefer-trailing-comma            # Trailing commas
    #- unnecessary-trailing-comma       # Redundant trailing commas

    # ====================================
    # SPECIALIZED RULES
    # ====================================
    
    # Testing
    - missing-test-assertion           # Missing assertion in tests
    - prefer-expect-later              # expect in later for async tests
    - avoid-duplicate-test-assertions  # Duplicate assertions in tests
    - prefer-test-matchers             # Matchers for tests
    - prefer-unique-test-names         # Unique test names
    - prefer-correct-test-file-name    # Correct test file names
    - prefer-visible-for-testing-on-members # @visibleForTesting on members
    
    # Project structure
    - match-lib-folder-structure       # Match lib folder structure
    - map-keys-ordering                # Map keys order
    
    # ====================================
    # BLOC PATTERN RULES
    # ====================================
    - avoid-bloc-public-fields         # Public fields in Bloc
    - emit-new-bloc-state-instances    # New Bloc state instances
    - prefer-bloc-extensions           # Bloc extensions
    - prefer-provider-extensions       # Provider extensions
    - handle-bloc-event-subclasses     # Handle Bloc event subclasses
    - avoid-passing-build-context-to-blocs # BuildContext in Bloc
    - avoid-duplicate-bloc-event-handlers # Duplicate event handlers
    - avoid-passing-bloc-to-bloc       # Pass Bloc to Bloc
    - check-is-not-closed-after-async-gap # isClosed after async gap
    - prefer-correct-bloc-provider     # Correct BlocProvider
    - prefer-multi-bloc-provider       # MultiBlocProvider where appropriate

    # ====================================  
    # FAKE ASYNC RULES
    # ====================================
    - avoid-async-callback-in-fake-async # Async callbacks in fakeAsync

    # ====================================
    # GET IT RULES  
    # ====================================
    - avoid-functions-in-register-singleton # Functions in registerSingleton

    # ====================================
    # INTERNATIONALIZATION RULES
    # ====================================
    - prefer-date-format               # DateFormat for dates
    - prefer-intl-name                 # Names for internationalization
    - prefer-providing-intl-description # Descriptions for intl
    - prefer-providing-intl-examples   # Examples for intl
    - provide-correct-intl-args        # Correct intl arguments
